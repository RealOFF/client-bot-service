const Telegraf = require('telegraf');
const Markup = require('telegraf/markup');
const session = require('telegraf/session');
require('dotenv').config();

const {initMessageModel} = require('./models/message');
const {initUserModel} = require('./models/user');
const channelConfig = require('../channels-config.json');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
let Message;
let User;
initModels();

async function initModels(){
    Message = await initMessageModel();
    User = await initUserModel();
}

bot.use(session());

bot.start(async ({from, reply, session}) => {
    const newUser = await saveUser(from);
    let message;
    if (newUser) {
        message = `–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª.üëç –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–≥–∏. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–ø–∏—à–∏ "/help".`;
        session.user = newUser;
    } else {
        message = '–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! ü§≠';
    }
    reply(message);
});

bot.help(async ({reply}) => {
    const message = `–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–º–∞–Ω–¥—ã:\n "/menu" - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é.\n "/settings" –∏–ª–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏"(–≤ –º–µ–Ω—é) - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–≥–∏. –í—ã–±–µ—Ä–∏ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∏ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –µ–≥–æ.\n "/updates" –∏–ª–∏ "–ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏"(–≤ –º–µ–Ω—é) - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤.\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∑–∞ —á–∞—Å/–¥–µ–Ω—å/–º–µ—Å—è—Ü.</i>`;
    reply(message, {parse_mode: 'html'});
});

bot.settings(tagsSettingsCallback);

bot.command('updates', async (ctx) => {
    replyUpdatesCallback(ctx);
});

bot.command('menu', async ({reply}) => {
    reply('–ú–µ–Ω—é', Markup
    .keyboard([
      ['–ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏'],
      ['–ü–æ–º–æ—â—å', 'üë• –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å']
    ])
    .oneTime()
    .resize()
    .extra()
    )
});

bot.hears('–ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', async (ctx) => {
    replyUpdatesCallback(ctx);
});

bot.hears('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏', async (ctx) => {
    tagsSettingsCallback(ctx);
});

bot.hears('–ü–æ–º–æ—â—å', async (ctx) => {
    helpCallback(ctx);
});

bot.hears('üë• –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', (ctx) => {
    ctx.reply('–°c—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.', Markup.inlineKeyboard([Markup.urlButton('üë• –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', 'https://t.me/jobot_feedback')]).extra());
});

bot.on('callback_query', async ({reply, update, editMessageText, session, editMessageReplyMarkup}) => {
    const {from} = update.callback_query;
    const tag  = update.callback_query.data;
    const {id} = from;
    let user = await getUser(id, session);
    user = user ? user : await saveUser(from);
    if (channelConfig.tags.includes(tag)) {
        const newTags = user.newTags;
        if (user.newTags.includes(tag)) {
            session.user.newTags = newTags.filter((el) => el !== tag);
        } else {
            session.user.newTags.push(tag);
        }
        console.log('Tags updated');
        const chackedTags = session.user.newTags.map((userTag) => channelConfig.tags.indexOf(userTag));
        const keyboard = getTagsKeyboard(channelConfig.tags, chackedTags);
        const controlButtons = [
            Markup.callbackButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ','save_tags_query'), 
            Markup.callbackButton('–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå','cancel_tags_query')
        ];
        keyboard.push(controlButtons);
        try {
            await editMessageReplyMarkup(Markup.inlineKeyboard(keyboard));
        } catch(e) {
            console.error(e);
        }
    } else if (tag === 'save_tags_query') {
        const newTags = session.user.newTags;
        session.user.tags = newTags;
        await saveUserTags(id, newTags);
        editMessageText('–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } else if (tag === 'cancel_tags_query') {
        session.user.newTags = session.user.tags;
        editMessageText('–¢–µ–≥–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } else {
        console.log('Tag not exist');
        await reply('–ß—Ç–æ?????');
    }
});


bot.launch();

async function getMessages (tags) {    
    tags = tags.map(el => el.toLowerCase());
    const messages = await Message.find({tags: {$in: tags}});
    return messages;
}

async function getUser(id, session) {
    const user = session.user;
    if (!user || !user.tags) {
        console.log('Finding user in DB');
        const user = await User.findOne({id});
        session.user = user;
    }
    if (session.user && (!session.user.newTags || !session.user.newTags.length)) {
        session.user.newTags = session.user.tags;
    }
    return session.user;
}

async function saveUserTags (id, newTags) {
    await User.updateOne({id}, {$set: {tags: newTags}});
}

function getTagsKeyboard(tags, chackedTags) {
    const grid = [];
    for(let i = 0; i < tags.length; i++) {
        if (i % 3 === 0) {
            grid.push([]);
        }
        text = tags[i] + (chackedTags.includes(i) ? ' ‚úÖ' : '');
        grid[Math.floor(i / 3)][i % 3] = Markup.callbackButton(text, tags[i]);
    }
    return grid;
}

function renderPostMessage(obj) {
    const viewMessage = `<b>üì´üì´üì´ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥–∏: #${obj.tags.join(', #')}</b>\n<i>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ –ø–æ —Å—Å–ª—ã–∫–µ ‚¨á‚¨á‚¨á</i>\n\n <i>–°—Å—ã–ª–∫–∞:</i> ${obj.url}`;
    let salaryPart = '';

    if (obj.salary && obj.salary.value) {
            let period;

            switch(obj.salary.period) {
                case 'HOUR':
                    period = '/ –ß–∞—Å';
                    break;
                case 'DAY':
                    period = '/ –î–µ–Ω—å';
                    break;
                case 'WEEK':
                    period = '/ –ù–µ–¥–µ–ª—è';
                    break;
                default:
                    period = '';
            }
            const currency = obj.salary.currency || '';
            salaryPart = `\n <i>–ó–∞—Ä–ø–ª–∞—Ç–∞ü§ë:</i> <b>${obj.salary.value} ${currency} ${period}</b>`;
    }
    return viewMessage + salaryPart;
}

async function saveUser({username, id}) {
    const isUserExist = !! await User.findOne({id});
    if (isUserExist) {
        return;
    }
    const user = User({
        id,
        name: username,
        tags: [],
    });
    await user.save();
    return user;
}

async function tagsSettingsCallback({reply, from, session}) {
    const user = await getUser(from.id, session);
    session.user.newTags = [...session.user.tags];
    const chackedTags = user.tags.map((userTag) => channelConfig.tags.indexOf(userTag));
    const keyboard = getTagsKeyboard(channelConfig.tags, chackedTags);
    const controlButtons = [
        Markup.callbackButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ', 'save_tags_query'),
        Markup.callbackButton('–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', 'cancel_tags_query')
    ];
    keyboard.push(controlButtons);
    reply('–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—é—â–∏–µ —Ç–µ–≥–∏. üîñüîñüîñ', Markup.inlineKeyboard(keyboard).extra());
}

async function replyUpdatesCallback({from, reply, session}) {
    const user = await getUser(from.id, session);

    if (!user) {
        await reply('–¢—ã –∫—Ç–æ? –ù–∞–ø–∏—à–∏ "/start", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.');
        return;
    }

    console.log('Start fetching messages');
    const postsInfo = await getMessages(user.tags);
    const includedTags = [];

    for (postInfo of postsInfo) {
        const postMessage = renderPostMessage(postInfo);
        await reply(postMessage, {parse_mode: 'html'});
        includedTags.push(...postInfo.tags)
    };
    const excludedTags = user.tags.filter((tag) => !includedTags.includes(tag.toLowerCase()));
    const uniqExcludedTags = excludedTags.filter((tag, index, self) => self.indexOf(tag) === index);
    if (uniqExcludedTags.length) {
        await reply(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ç–µ–≥–∞–º: ${uniqExcludedTags.join(', ')} ‚Äì –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. üò¢`);
    }
}

async function helpCallback({reply}) {
    const message = `–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–º–∞–Ω–¥—ã:\n "/menu" - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é.\n "/settings" –∏–ª–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏"(–≤ –º–µ–Ω—é) - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–≥–∏. –í—ã–±–µ—Ä–∏ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∏ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –µ–≥–æ.\n "/update" –∏–ª–∏ "–ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏"(–≤ –º–µ–Ω—é) - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤.\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∑–∞ —á–∞—Å/–¥–µ–Ω—å/–º–µ—Å—è—Ü.</i>`;
    reply(message, {parse_mode: 'html'});
}
