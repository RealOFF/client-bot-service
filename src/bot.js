const mongoose = require('mongoose');
const Telegraf = require('telegraf');
const Markup = require('telegraf/markup');
const session = require('telegraf/session');
require('dotenv').config();

const MessageSchema = require('./models/message');
const UserSchema = require('./models/user');
const channelConfig = require('../channels-config.json');

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

bot.use(session());

bot.start(async ({message, reply, session}) => {
    const chatId = message.chat.id;
    const name = message.chat.username;
    const newUser = await saveUser(chatId, name);
    if (newUser) {
        message = `–ü—Ä–∏–≤–µ—Ç, —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª.üëç –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–≥–∏. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–ø–∏—à–∏ "/help".`;
        session.user = newUser;
    } else {
        message = '–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! ü§≠';
    }
    reply(message);
});

bot.help(async ({reply}) => {
    const message = `–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–º–∞–Ω–¥—ã:\n"/settings" - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–≥–∏. –í—ã–±–µ—Ä–∏ —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∏ —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –µ–≥–æ.\n "/update" - –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤.\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –∑–∞ —á–∞—Å/–¥–µ–Ω—å/–º–µ—Å—è—Ü.</i>`;
    reply(message, {parse_mode: 'html'});
});

bot.settings(async ({reply, message, session}) => {
    const user = await getUser(message.chat.id, session);
    session.user.oldTags = session.user.tags;
    const chackedTags = user.tags.map((userTag) => channelConfig.tags.indexOf(userTag));
    const keyboard = getTagsKeyboard(channelConfig.tags, chackedTags);
    const controlButtons = [
        Markup.callbackButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ', 'save_tags_query'),
        Markup.callbackButton('–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', 'cancel_tags_query')
    ];
    keyboard.push(controlButtons);
    reply('–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—é—â–∏–µ —Ç–µ–≥–∏. üîñüîñüîñ', Markup.inlineKeyboard(keyboard).extra());
});

bot.command('update', async ({message, reply, session}) => {
    const user = await getUser(message.chat.id, session);
    console.log('Start fetch messages');
    if (!user) {
        await reply('–¢—ã –∫—Ç–æ? –ù–∞–ø–∏—à–∏ "/start", —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.');
        return;
    }
    const postsInfo = await getMessages(user.tags);
    const includedTags = [];
    for (postInfo of postsInfo) {
        const postMessage = renderPostMessage(postInfo);
        await reply(postMessage, {parse_mode: 'html'});
        includedTags.push(...postInfo.tags)
    };
    const excludedTags = user.tags.filter((tag) => !includedTags.includes(tag.toLowerCase()));
    const uniqExcludedTags = excludedTags.filter((tag, index, self) => self.indexOf(tag) === index);
    if (uniqExcludedTags.length) {
        await reply(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ç–µ–≥–∞–º: ${uniqExcludedTags.join(', ')} ‚Äì –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. üò¢`);
    }
});

bot.on('callback_query', async ({reply, update, editMessageText, session, editMessageReplyMarkup}) => {
    const tag  = update.callback_query.data;
    const chatId = update.callback_query.message.chat.id;
    const user = await getUser(chatId, session);

    if (channelConfig.tags.includes(tag)) {
        const newTags = user.tags;
        if (user.tags.includes(tag)) {
            session.user.tags = newTags.filter((el) => el !== tag);
        } else {
            session.user.tags = [...newTags, tag];
        }
        console.log('Tags updated');
        const chackedTags = session.user.tags.map((userTag) => channelConfig.tags.indexOf(userTag));
        const keyboard = getTagsKeyboard(channelConfig.tags, chackedTags);
        const controlButtons = [
            Markup.callbackButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ','save_tags_query'), 
            Markup.callbackButton('–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå','cancel_tags_query')
        ];
        keyboard.push(controlButtons);
        await editMessageReplyMarkup(Markup.inlineKeyboard(keyboard));
    } else if (tag === 'save_tags_query') {
        const newTags = session.user.tags;
        console.log(newTags)
        await saveUserTags(chatId, newTags);
        editMessageText('–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } else if (tag === 'cancel_tags_query') {
        session.user.tags = session.user.oldTags;
        editMessageText('–¢–µ–≥–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } else {
        console.log('Tag not exist');
        await reply('–ß—Ç–æ?????');
    }
   });


bot.launch();


async function getMessages (tags) {
    const dbURL = process.env.MONGODB_URL_MESSAGES;
    const messagesDBConnection = await mongoose.createConnection(dbURL,  {useNewUrlParser: true,  useUnifiedTopology: true});
    const Message = messagesDBConnection.model('message', MessageSchema);
    tags = tags.map(el => el.toLowerCase());
    const messages = await Message.find({tags: {$in: tags}});
    messagesDBConnection.close();
    return messages;
}

async function getUser(chatId, session) {
    const sessionUser = session.user;
    if (sessionUser && sessionUser.tags) {
        return sessionUser;
    } 
    const dbURL = process.env.MONGODB_URL_USERS;
    const usersDBConnection = await mongoose.createConnection(dbURL,  {useNewUrlParser: true,  useUnifiedTopology: true});
    const User = usersDBConnection.model('user', UserSchema);
    const user = await User.findOne({chatId});
    usersDBConnection.close();
    session.user = user;
    return user;
}

async function saveUserTags (chatId, newTags) {
    const dbURL = process.env.MONGODB_URL_USERS;
    const usersDBConnection = await mongoose.createConnection(dbURL,  {useNewUrlParser: true,  useUnifiedTopology: true});
    const User = usersDBConnection.model('user', UserSchema);
    await User.update({chatId}, {$set: {tags:newTags}});
}

function getTagsKeyboard(tags, chackedTags) {
    const grid = [];
    for(let i = 0; i < tags.length; i++) {
        if (i % 3 === 0) {
            grid.push([]);
        }
        text = tags[i] + (chackedTags.includes(i) ? ' ‚úÖ' : '');
        grid[Math.floor(i / 3)][i % 3] = Markup.callbackButton(text, tags[i]);
    }
    return grid;
}

function renderPostMessage(obj) {
    const viewMessage = `<b>üì´üì´üì´ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥–∏: #${obj.tags.join(', #')}</b>\n<i>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ –ø–æ —Å—Å–ª—ã–∫–µ ‚¨á‚¨á‚¨á</i>\n\n <i>–°—Å—ã–ª–∫–∞:</i> ${obj.url}`;
    let salaryPart = '';

    if (obj.salary && obj.salary.value) {
            let period;

            switch(obj.salary.period) {
                case 'HOUR':
                    period = '/ –ß–∞—Å';
                    break;
                case 'DAY':
                    period = '/ –î–µ–Ω—å';
                    break;
                case 'WEEK':
                    period = '/ –ù–µ–¥–µ–ª—è';
                    break;
                default:
                    period = '';
            }
            const currency = obj.salary.currency || '';
            salaryPart = `\n <i>–ó–∞—Ä–ø–ª–∞—Ç–∞ü§ë:</i> <b>${obj.salary.value} ${currency} ${period}</b>`;
    }
    return viewMessage + salaryPart;
}

async function saveUser(chatId, name, session) {
    const dbURL = process.env.MONGODB_URL_USERS;
    const usersDBConnection = await mongoose.createConnection(dbURL,  {useNewUrlParser: true,  useUnifiedTopology: true});
    console.log('User DB connected')
    const User = usersDBConnection.model('user', UserSchema);
    const isUserExist = !! await User.find({chatId}).length;
    if (isUserExist) {
        usersDBConnection.close();
        return;
    }
    const user = User();
    user.chatId = chatId;
    user.name = name;
    user.tags = [];
    await user.save();
    usersDBConnection.close();
    return user;
}
